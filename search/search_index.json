{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Class for writing mqtt data to mongodb __init__ ( self ) special Initialize the class Source code in mqtt/mqtt.py def __init__ ( self ): \"\"\"Initialize the class\"\"\" client = MongoClient ( os . environ [ \"MONGODB_CLIENT\" ]) db = client . iot self . db = db . raw self . fail_count = 0 self . fail_max = 30 self . fail_init () self . run () fail_check ( self ) Check for failure count Source code in mqtt/mqtt.py def fail_check ( self ): \"\"\"Check for failure count\"\"\" self . fail_count += 1 logging . warning ( \"couldn't connect {0} time(s)\" . format ( str ( self . fail_count )) ) if self . fail_count > self . fail_max - 1 : logging . error ( \"exiting...\" ) os . remove ( \"/healthy\" ) sys . exit ( 1 ) fail_init ( self ) Initialize check for failure Source code in mqtt/mqtt.py def fail_init ( self ): \"\"\"Initialize check for failure\"\"\" self . fail_count = 0 with open ( \"/healthy\" , \"w\" ) as fp : fp . write ( \"healthy\" ) pass on_connect ( self , client , userdata , flags , rc ) Connects to the eventstream Source code in mqtt/mqtt.py def on_connect ( self , client , userdata , flags , rc ): \"\"\"Connects to the eventstream\"\"\" logging . info ( \"connected with result code {0} \" . format ( str ( rc ))) client . subscribe ( \"eventstream/raw\" , 2 ) on_disconnect ( self , client , userdata , rc ) Connects to the eventstream Source code in mqtt/mqtt.py def on_disconnect ( self , client , userdata , rc ): \"\"\"Connects to the eventstream\"\"\" logging . info ( \"disconnected with result code {0} \" . format ( str ( rc ))) self . run () on_message ( self , client , userdata , msg ) Writes a each message to mongodb Source code in mqtt/mqtt.py def on_message ( self , client , userdata , msg ): \"\"\"Writes a each message to mongodb\"\"\" message = msg . payload . decode ( \"utf-8\" ) message = json . loads ( message ) ins = message [ \"event_data\" ][ \"new_state\" ] ins [ \"timestamp_\" ] = datetime . now ( timezone . utc ) try : self . db . insert_one ( ins ) logging . info ( ins ) except Exception : pass run ( self ) Runs the class object Source code in mqtt/mqtt.py def run ( self ): \"\"\"Runs the class object\"\"\" while True : try : self . client = mqtt . Client ( client_id = \"kk6gpv-mqtt\" , clean_session = False , ) self . client . on_connect = self . on_connect self . client . on_message = self . on_message self . client . on_disconnect = self . on_disconnect self . client . connect ( \"broker.hivemq.com\" , 1883 , 60 ) self . client . loop_forever () self . fail_init () except Exception : time . sleep ( 2 ) self . fail_check ()","title":"Reference"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#mqtt.mqtt.Mqtt","text":"Class for writing mqtt data to mongodb","title":"mqtt.mqtt.Mqtt"},{"location":"#mqtt.mqtt.Mqtt.__init__","text":"Initialize the class Source code in mqtt/mqtt.py def __init__ ( self ): \"\"\"Initialize the class\"\"\" client = MongoClient ( os . environ [ \"MONGODB_CLIENT\" ]) db = client . iot self . db = db . raw self . fail_count = 0 self . fail_max = 30 self . fail_init () self . run ()","title":"__init__()"},{"location":"#mqtt.mqtt.Mqtt.fail_check","text":"Check for failure count Source code in mqtt/mqtt.py def fail_check ( self ): \"\"\"Check for failure count\"\"\" self . fail_count += 1 logging . warning ( \"couldn't connect {0} time(s)\" . format ( str ( self . fail_count )) ) if self . fail_count > self . fail_max - 1 : logging . error ( \"exiting...\" ) os . remove ( \"/healthy\" ) sys . exit ( 1 )","title":"fail_check()"},{"location":"#mqtt.mqtt.Mqtt.fail_init","text":"Initialize check for failure Source code in mqtt/mqtt.py def fail_init ( self ): \"\"\"Initialize check for failure\"\"\" self . fail_count = 0 with open ( \"/healthy\" , \"w\" ) as fp : fp . write ( \"healthy\" ) pass","title":"fail_init()"},{"location":"#mqtt.mqtt.Mqtt.on_connect","text":"Connects to the eventstream Source code in mqtt/mqtt.py def on_connect ( self , client , userdata , flags , rc ): \"\"\"Connects to the eventstream\"\"\" logging . info ( \"connected with result code {0} \" . format ( str ( rc ))) client . subscribe ( \"eventstream/raw\" , 2 )","title":"on_connect()"},{"location":"#mqtt.mqtt.Mqtt.on_disconnect","text":"Connects to the eventstream Source code in mqtt/mqtt.py def on_disconnect ( self , client , userdata , rc ): \"\"\"Connects to the eventstream\"\"\" logging . info ( \"disconnected with result code {0} \" . format ( str ( rc ))) self . run ()","title":"on_disconnect()"},{"location":"#mqtt.mqtt.Mqtt.on_message","text":"Writes a each message to mongodb Source code in mqtt/mqtt.py def on_message ( self , client , userdata , msg ): \"\"\"Writes a each message to mongodb\"\"\" message = msg . payload . decode ( \"utf-8\" ) message = json . loads ( message ) ins = message [ \"event_data\" ][ \"new_state\" ] ins [ \"timestamp_\" ] = datetime . now ( timezone . utc ) try : self . db . insert_one ( ins ) logging . info ( ins ) except Exception : pass","title":"on_message()"},{"location":"#mqtt.mqtt.Mqtt.run","text":"Runs the class object Source code in mqtt/mqtt.py def run ( self ): \"\"\"Runs the class object\"\"\" while True : try : self . client = mqtt . Client ( client_id = \"kk6gpv-mqtt\" , clean_session = False , ) self . client . on_connect = self . on_connect self . client . on_message = self . on_message self . client . on_disconnect = self . on_disconnect self . client . connect ( \"broker.hivemq.com\" , 1883 , 60 ) self . client . loop_forever () self . fail_init () except Exception : time . sleep ( 2 ) self . fail_check ()","title":"run()"}]}